import asyncio
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from config_data.config import Config, load_config
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButtonPollType,
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types.web_app_info import WebAppInfo

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

dp = Dispatcher()


# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format="%(filename)s:%(lineno)d #%(levelname)-8s "
        "[%(asctime)s] - %(name)s - %(message)s",
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    logger.info("Starting bot")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
    config: Config = load_config()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=config.tg_bot.token)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫
    # kb_builder = ReplyKeyboardBuilder()
    # button_1 = KeyboardButton(text="–°–æ–±–∞–∫ ü¶Æ")
    # button_2 = KeyboardButton(text="–û–≥—É—Ä—Ü–æ–≤ ü•í")

    # buttons: list[KeyboardButton] = [
    #     KeyboardButton(text=f"–ö–Ω–æ–ø–∫–∞ {i + 1}") for i in range(10)
    # ]

    # kb_builder.row(*buttons, width=4)
    # kb_builder.add(*buttons)

    # kb_builder.row(*buttons)

    # –í –ø–µ—Ä–≤–æ–º —Ä—è–¥—É 1 –∫–Ω–æ–ø–∫–∞, –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö 3 –∫–Ω–æ–ø–∫–∏
    # kb_builder.adjust(1, 3)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏
    # keyboard = ReplyKeyboardMarkup(
    #     keyboard=[[button_1, button_2]], resize_keyboard=True, one_time_keyboard=True
    # )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    # kb_builder = ReplyKeyboardBuilder()

    # # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    # contact_btn = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)
    # geo_btn = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    # poll_btn = KeyboardButton(
    #     text="–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å/–≤–∏–∫—Ç–æ—Ä–∏–Ω—É", request_poll=KeyboardButtonPollType()
    # )

    # # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –±–∏–ª–¥–µ—Ä
    # kb_builder.row(contact_btn, geo_btn, poll_btn, width=1)

    # # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    # keyboard: ReplyKeyboardMarkup = kb_builder.as_markup(
    #     resize_keyboard=True, one_time_keyboard=True
    # )

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard: list[list[KeyboardButton]] = [
        [KeyboardButton(text=str(i)) for i in range(1, 4)],
        [KeyboardButton(text=str(i)) for i in range(4, 7)],
        [KeyboardButton(text=str(i)) for i in range(7, 9)],
    ]

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏
    my_keyboard = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
    @dp.message(CommandStart())
    async def process_start_command(message: Message):
        await message.answer(
            text="–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏", reply_markup=my_keyboard
        )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
    # web_app_btn = KeyboardButton(
    #     text="Start Web App", web_app=WebAppInfo(url="https://stepik.org/")
    # )
    # # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    # web_app_keyboard = ReplyKeyboardMarkup(
    #     keyboard=[[web_app_btn]], resize_keyboard=True
    # )

    # # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/web_app"
    # @dp.message(Command(commands="web_app"))
    # async def process_web_app_command(message: Message):
    #     await message.answer(
    #         text="–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏",
    #         reply_markup=web_app_keyboard,
    #     )

    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
    # –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # @dp.message(CommandStart())
    # async def process_start_command(message: Message):
    #     # await message.answer(text="–ß–µ–≥–æ –∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è –±–æ–ª—å—à–µ?", reply_markup=keyboard)

    #     await message.answer(
    #         text="–í–æ—Ç —Ç–∞–∫–∞—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
    #         reply_markup=kb_builder.as_markup(resize_keyboard=True),
    #     )

    # # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç "–°–æ–±–∞–∫ ü¶Æ" –∏ —É–¥–∞–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # @dp.message(F.text == "–°–æ–±–∞–∫ ü¶Æ")
    # async def process_dog_answer(message: Message):
    #     await message.answer(
    #         text="–î–∞, –Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ, –∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è —Å–æ–±–∞–∫. "
    #         "–ù–æ –≤—ã –≤–∏–¥–µ–ª–∏ –∫–∞–∫ –æ–Ω–∏ –±–æ—è—Ç—Å—è –æ–≥—É—Ä—Ü–æ–≤?",
    #         reply_markup=ReplyKeyboardRemove(),
    #     )

    # # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç "–û–≥—É—Ä—Ü–æ–≤ ü•í" –∏ —É–¥–∞–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # @dp.message(F.text == "–û–≥—É—Ä—Ü–æ–≤ ü•í")
    # async def process_cucumber_answer(message: Message):
    #     await message.answer(
    #         text="–î–∞, –∏–Ω–æ–≥–¥–∞ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –æ–≥—É—Ä—Ü–æ–≤ " "–∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è –±–æ–ª—å—à–µ",
    #         reply_markup=ReplyKeyboardRemove(),
    #     )

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
